<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageSdkCs</name>
    </assembly>
    <members>
        <member name="T:P1.ImageSdk.BitmapFormat">
            <summary>
            Available pixel formats for encoding the image bitmap
            </summary>
        </member>
        <member name="F:P1.ImageSdk.BitmapBase.Data">
            <summary>
            The image data
            </summary>
        </member>
        <member name="T:P1.ImageSdk.ITiffWritableImage">
            <summary>
            An interface that define the class can be consumed by ImageSDK's TiffWriter
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ITiffWritableImage.Scan0">
            <summary>
            Get a IntPtr to the underlying data buffer with the image data
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ITiffWritableImage.ByteSize">
            <summary>
            The total size of the image data in bytes
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ITiffWritableImage.Format">
            <summary>
            The pixel format used in the image data
            </summary>
        </member>
        <member name="T:P1.ImageSdk.BitmapImage">
            <summary>
            An in-memory bitmap image, represented using a defined pixel format, width and height
            </summary>
        </member>
        <member name="P:P1.ImageSdk.BitmapImage.Stride">
            <summary>
            The memory span between each horizontal line in the image. Normally the pixel size multiplied by the width.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.BitmapImage.Scan0">
            <summary>
            Get a IntPtr to the byte[] buffer with the image data
            </summary>
            <remarks>This is mainly to provide compatibility with the <pre>System.Drawing.Bitmap</pre> class</remarks>
        </member>
        <member name="T:P1.ImageSdk.Rect">
            <summary>
            A rectangular area defined on any 2D Cartesian coordinate system defined by its top left corner and size.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.Rect.X">
            <summary>
            The horizontal distance from the origin of that coordinate system
            </summary>
        </member>
        <member name="P:P1.ImageSdk.Rect.Y">
            <summary>
            The vertical distance from the origin of that coordinate system
            </summary>
        </member>
        <member name="P:P1.ImageSdk.Rect.Width">
            <summary>
            The horizontal length of the rectangle
            </summary>
        </member>
        <member name="P:P1.ImageSdk.Rect.Height">
            <summary>
            The vertical length of the rectangle
            </summary>
        </member>
        <member name="T:P1.ImageSdk.SensorBayerOutput">
            <summary>
            A BitmapImage that represents Bayer (raw) sensor output, and therefore includes non-visible pixels
            </summary>
            <remarks>
            <para>This class represents image data, where there might exist a border of non-illuminated (non exposed)
            pixels, around the edges of the RAW image.</para>
            <para>Image sensors might use such area to store sensor specific data and configurations.
            This class includes a property to extract the active (exposed) image area from the pixel data.</para>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.SensorBayerOutput.ActiveArea">
            <summary>
            Defines the offset and dimension of the area of the exposed pixels in the RAW image
            </summary>
            <remarks>
            Pixels outside this area, is <em>not</em> real image data, but sensor specific configuration and properties
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.SensorBayerOutput.FullWidth">
            <summary>
            The full width of the sensor output, including non-exposed area
            </summary>
            /// <seealso cref="P:P1.ImageSdk.SensorBayerOutput.ActiveArea"/>
        </member>
        <member name="P:P1.ImageSdk.SensorBayerOutput.FullHeight">
            <summary>
            The full height of the sensor output, including non-exposed area
            </summary>
            <seealso cref="P:P1.ImageSdk.SensorBayerOutput.ActiveArea"/>
        </member>
        <member name="T:P1.ImageSdk.NativeMemoryRef">
            <summary>
            A wrapper around a temporary reference to an block of unmanaged memory
            </summary>
            <remarks>
            <para>This object references memory owned by the SDK subsystem, so you <em>must</em> <see cref="M:P1.ImageSdk.NativeMemoryRef.Dispose"/> it
            as soon as you are done with it. Either manually call <see cref="M:P1.ImageSdk.NativeMemoryRef.Dispose"/> or use a <pre>using</pre> block
            to ensure quick disposal of the referenced memory. (Do <em>not</em> rely on the garbage collector to eventually
            free the object.</para>
            <para>Since the lower layers of this ImageSDK are written in C/C++, (large) images can be returned to
            CLR contexts as a reference to unmanaged memory. This allows you to avoid extranous copies
            of the image data.</para>
            <para>This class implements the <see cref="T:System.IO.Stream"/> abstract class, so you can easily stream
            its content to a file or other destination stream.</para>
            <para>The method <see cref="M:P1.ImageSdk.NativeMemoryRef.ToArray"/> copies the entire data buffer into a byte array (<pre>byte[]</pre>).
            This effectively transfers (copies) the data from unmanaged memory into managed.</para>
            </remarks>
        </member>
        <member name="T:P1.ImageSdk.HugeBitmapImage">
            <summary>
            An unmanaged memory bitmap image, too large to be stored as a <em>byte[]</em> object.
            Represented using a defined pixel format, width and height
            </summary>
            <remarks>
            <para>Always use this class inside <em>using</em> contexts, to ensure proper (timely) disposal
            of the referenced unmanaged memory.</para>
            <para>Also, be careful if you use the <see cref="M:P1.ImageSdk.NativeMemoryRef.ToArray"/> method, since it
            <strong>will</strong> truncate the returned data to fit inside an array with a signed 32-bit
            integer index. Meaning it can <em>only</em> return the first 2.1 GB of image data.</para>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.HugeBitmapImage.Data">
            <summary>
            Reference to the image data contained in unmanaged memory
            </summary>
        </member>
        <member name="T:P1.ImageSdk.CInterface.CFunctions.CsC_Allocator">
            <summary>
            This object can be supplied to C functions, and allows them (the C functions), to allocate memory inside C#
            context. This means C function that convert images, can allocate image buffers that are C# memory, and there is managed.
            (Garbage collected.)
            
            This allocator object must allow its <em>allocate</em> method to be called multiple times!
            
            For 3.0 stitching and stacking features, memory usage can exceeed what is possible to alloc with <em>new byte[2 GB]</em>
            since plain C# arrays index in a signed 32-bit integer.
            
            To counter that some CsC_* functions might not use C# based alloc'ing at all, and instead return pointers to native memory.
            </summary>
        </member>
        <member name="M:P1.ImageSdk.CInterface.CFunctions.CsC_Allocator.GetBufferWithIndex(P1.ImageSdk.CInterface.CFunctions.CsC_Allocator,System.UInt32)">
            <summary>
            Some Allocators might have more than one buffer allocated, define which to get with this method
            </summary>
            <remarks>This method does <em>not</em> release the allocator or its buffers. It will, however, call .Free()
            on the GCHandle object pinning the memory. This means that accessed buffer memory can be (from then on) relocated
            and therefore unusable to C.</remarks>
            <param name="allocator"></param>
            <param name="index">Index of the buffer, where 0 is the first one allocated, 1 is the second, ect.</param>
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.CInterface.CFunctions.CsC_Allocator.ReleaseAllocator(P1.ImageSdk.CInterface.CFunctions.CsC_Allocator)">
            <summary>
            Releases all buffer allocated by a given allocator object.
            This method is called automatically if you utilize the disposing pattern!
            </summary>
            <remarks>'Release' means that the buffer are no longer 'pinned' or referencable by neither
            C context nor CsC_Alloctor methods. This effectively leaves it to the GC to collect the buffer eventually.</remarks>
            <param name="allocator"></param>
        </member>
        <member name="T:P1.ImageSdk.CanvasClip">
            <summary>
            Defines how to handle non-rectangular or non-upright canvas
            </summary>
        </member>
        <member name="F:P1.ImageSdk.CanvasClip.CanvasClipNone">
            <summary>
            Canvas has the full RAW image. This option will consider all input pixels, but may output blank pixels.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.CanvasClip.CanvasClipWarpLoose">
            <summary>
            Clip warped edges. This option will only consider the maximum interior bounding box, and all pixels will be valid.
            </summary>
        </member>
        <member name="T:P1.ImageSdk.Clarity">
            <summary>
            Defines how the Clarity operation should operate
            </summary>       
        </member>
        <member name="F:P1.ImageSdk.Clarity.Method">
            <summary>
            Which Clarity method to use
            </summary>
            <remark>
            The following methods are available:
            * clarityMethodNeutral = 0
            * clarityMethodPunch = 1
            * clarityMethodNatural = 2
            </remark>
        </member>
        <member name="F:P1.ImageSdk.Clarity.Factor">
            <summary>
            How strong the selected Method should be applied
            </summary>
            <remark>
            0.0 means no Clarity should be applied, positive value increases the local contrast of the output, negative value decreases it.
            </remark>
        </member>
        <member name="T:P1.ImageSdk.GeometricCorrection">
            <summary>
            The collection of geometric correction parameters, as they are stated in Australis Format in the Calibration Result form received with calibrated cameras.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.xp">
            <summary>
            Principal point offset x coordinate
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.yp">
            <summary>
            Principal point offset y coordinate
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.k1">
            <summary>
            First radial distortion coefficient
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.k2">
            <summary>
            Second radial distortion coefficient
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.k3">
            <summary>
            Third radial distortion coefficient
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.p1">
            <summary>
            First radial-assymetric and tangential coefficient
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.p2">
            <summary>
            Second radial-assymetric and tangential coefficient
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.b1">
            <summary>
            Affinity and non-orthogonality coefficient for x coordinate
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.b2">
            <summary>
            Affinity and non-orthogonality coefficient for y coordinate
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.c">
            <summary>
            Lens focal lenght in mm
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeometricCorrection.h">
            <summary>
            Pixel size in mm
            </summary>
        </member>
        <member name="T:P1.ImageSdk.ValueRange`1">
            <summary>
            Defines a range to be used in association with certain <seealso cref="T:P1.ImageSdk.ConvertConfig">ConvertConfig</seealso> parameters
            </summary>
        </member>
        <member name="T:P1.ImageSdk.ConvertConfig">
            <summary>
            Defines a set of RAW convertion- and filter-flags, that can be applied to a raw-image
            </summary>
            <remarks>
            <para>This class let you raw convert an IIQ raw-image. Use it to setup decoding and
            convertion options, before actual triggering the convertion with
            <see cref="M:P1.ImageSdk.ConvertConfig.ApplyTo(P1.ImageSdk.RawImage,System.Func{System.UInt32,System.Byte[]})"/>.</para>
            <para>You can also apply different filters to the image, including scaling and cropping.
            You should note that the order the filters are applied is fixed. You cannot define any
            ordering on your own.</para>
            <para>Any applied cropping or resizing dimensions might not be followed 100% by resampling algorithm. The
            resulting image might differ with a few pixels. Always check the output dimensions, and
            do not assume your image has the crop you requested.</para>
            </remarks>
            <example>
            Simple one-liner raw convertion and scaling
            var bitmap = new ConvertConfig().SetScale(0.25).AppleTo(new RawImage("some-file.iiq"));
            </example>
            <seealso cref="M:P1.ImageSdk.RawImage.Convert(P1.ImageSdk.ConvertConfig,System.Func{System.UInt32,System.Byte[]})"/>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.#ctor">
            <summary>
            Creates a new raw convertion config object
            </summary>
            <seealso cref="M:P1.ImageSdk.RawImage.Convert(P1.ImageSdk.ConvertConfig,System.Func{System.UInt32,System.Byte[]})"/>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.Clone">
            <summary>
            Creates a clone of the current ConvertConfig, which can be modified independently of the current object
            </summary>
            <returns>
            A new ConvertConfig object with the same content the current object has
            </returns>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.Crop">
            <summary>
            The cropping configuration of the outpu 
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.OutputScaleFactor">
            <summary>
            The scaling factor of the output image if set.
            </summary>
            <remarks>
            Setting any of the three scaling properties will reset the other two. In case none of them is set, the output will be 100% of the input image.
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.OutputWidth">
            <summary>
            The width of the output image if set.
            </summary>
            <remarks>
            Setting any of the three scaling properties will reset the other two. In case none of them is set, the output will be 100% of the input image.
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.OutputHeight">
            <summary>
            The height of the output image if set.
            </summary>
            <remarks>
            Setting any of the three scaling properties will reset the other two. In case none of them is set, the output will be 100% of the input image.
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.ExposureRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the Exposure property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-4.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>4.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.ContrastRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the Contrast property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.BrightnessRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the Brightness property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.SaturationRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the Saturation property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.ShadowRecoveryRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the ShadowRecovery property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.HighlightRecoveryRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the HighlightRecovery property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.BlackLevelRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the BlackLevel property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.WhiteLevelRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the WhiteLevel property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>1.0</description>
            </item>
            </list>
            </remarks>            
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.MidtoneLevelRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the MidtoneLevel property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.CurveInOutRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the X and Y field of each element of the curve type properties.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            The properties this applies to are the following
            <list type="bullet">
            <item>
               <description><seealso cref="P:P1.ImageSdk.ConvertConfig.RedCurve">RedCurve</seealso></description>
            </item>
               <item>
                   <description><seealso cref="P:P1.ImageSdk.ConvertConfig.BlueCurve">BlueCurve</seealso></description>
               </item>
               <item>
                   <description><seealso cref="P:P1.ImageSdk.ConvertConfig.GreenCurve">GreenCurve</seealso></description>
               </item>
               <item>
                   <description><seealso cref="P:P1.ImageSdk.ConvertConfig.LumaCurve">LumaCurve</seealso></description>
               </item>
               <item>
                   <description><seealso cref="P:P1.ImageSdk.ConvertConfig.RGBCurve">RGBCurve</seealso></description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.ClarityMethodRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the Method field of the Clarity property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>clarityMethodNeutral = 0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>clarityMethodNatural = 2</description>
            </item>
            <item>
               <term>Default</term>
               <description>clarityMethodNeutral = 0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.ClarityFactorRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the Factor field of the Clarity property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.NoiseReductionRadiusRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the NoiseReductionRadius property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>32</description>
            </item>
            <item>
               <term>Default</term>
               <description>0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.WhiteBalanceGainRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the RGB channels of the White Balance Gain property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>10.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0, meaning to use the metadata embedded into the IIQ file.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.GeometricCorrectionFocalLengthRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the FocalLength field of the GeometricCorrection property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>23.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>10000.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.GeometricCorrectionPixelPitchRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the PixelSize field of the GeometricCorrection property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.001</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>0.05317</description>
            </item>
            <item>
               <term>Default</term>
               <description>-1.0, indicating that the GeometricCorrection is unset, and is not to be used.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.GeometricCorrectionShiftRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the xp, yp fields of the GeometricCorrection property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-30.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>30.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ConvertConfig.GeometricCorrectionPolinomRange">
            <summary>
            The <see cref="T:P1.ImageSdk.ValueRange`1">value range</see> of the k1, k2, k3, p1, p2, b1, b2 fields of the GeometricCorrection property.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0e-3</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0e-3</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.Exposure">
            <summary>
            Adjust the exposure of the image
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-4.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>4.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.Contrast">
            <summary>
            Adjust the contrast of the image.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.Brightness">
            <summary>
            Adjust the brightness of the image
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.Saturation">
            <summary>
            Adjust the saturation of the image
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>-1.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.HighlightRecovery">
            <summary>
            Used to extract details only in the highlights of the image by reducing the brightness of highlight pixels.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ShadowRecovery">
            <summary>
            Used to extract details only in the shadows of the image by making them brighter.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>0.0</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>1.0</description>
            </item>
            <item>
               <term>Default</term>
               <description>0.0</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.BlackLevel">
            <summary>
            Set the level used for black. This is a color that black color is mapped into (as in a level tool)
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0,0.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.MidtoneLevel">
            <summary>
            Set the midtone level. This is a color that is used as 50% level of the color values
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0,0.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.WhiteLevel">
            <summary>
            Set the level used for white. This is a color that white color is mapped into (as in a level tool)
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0,0.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.RedCurve">
            <summary>
            Set the curve for red values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0)-(1.0,1.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.GreenCurve">
            <summary>
            Set the curve for green values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0)-(1.0,1.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.BlueCurve">
            <summary>
            Set the curve for blue values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0)-(1.0,1.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.LumaCurve">
            <summary>
            Set the curve for luma values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0)-(1.0,1.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.RGBCurve">
            <summary>
            Set the curve for rgb values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <remarks>
            <list type="table">
            <item>
               <term>Minimum</term>
               <description>(0.0,0.0)</description>
            </item>
            <item>
               <term>Maximum</term>
               <description>(1.0,1.0)</description>
            </item>
            <item>
               <term>Default</term>
               <description>(0.0,0.0)-(1.0,1.0)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.WhiteBalanceGain">
            <summary>
            The White Balance as gain for each channels (RGB). The valid range of each individual channel is between 0.0f and 10.0f.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.Clarity">
            <summary>
            Setup the clarity tool. Its used as a tool to help control the local contrast in the image.
            </summary>    
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.NoiseReductionRadius">
            <summary>
            The pixel radius used for the Noise Reduction algorithm to sample neighbouring pixels to reduce noise. The value is between 0 and 32. Default is 0.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.SharpeningAmount">
            <summary>
            Adjust the amount of sharpening of the image. SharpeningAmount is a value between -10.0 and 10.0. Default is 0.0
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.GeometricCorrectionEnabled">
            <summary>
            A Boolean value indicating if the conversion will include Geometric Aberration correction
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.GeometricCorrection">
            <summary>
            Custom Geometric Aberration correction parameter set.
            If geometricCorrection is set to an invalid value, the the conversion will try to load the geometric correction data embedded in the source IIQ file
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.LightFalloffCorrectionEnabled">
            <summary>
            A Boolean value indicating if the conversion will include Lens Light falloff correction for recognized lenses
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.HistogramStage">
            <summary>
            Request in which stage of the processing pipeline a histogram must be sampled (its mainly used for debugging). Default is to not sample a histogram.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.EnableLinearPath">
            <summary>
            Set EnableLinearPath setting. This setting is used to disable most of the processing steps to make sure that the debayering of the image into rgb domain is done
            only using a simple linear mapping enabling only the minimum needed processing.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ChromaticAberrationCorrectionEnabled">
            <summary>
            A Boolean value indicating if the conversion will include Chromatic Aberration (CA) correction
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ExposureWarningMaskEnabled">
            <summary>
            Control generation of exposure mask in the mask image. True means enable. Default is disabled. When doing the actual convertion of an image - a mask buffer must be provided. 
            If enabled the underexposed threshold and overexposed threshold should also be set
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ExposureWarningThresholdOver">
            <summary>
            Set the value of the overexposed warning settings used when exposure mask generation is enabled. ExposeWarningThresholdOver is a value between 0.0 and 1.0 so it is independend oof the bitdepth of the image
            </summary>        
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ExposureWarningThresholdUnder">
            <summary>
            Set the value of the underexposed warning settings used when exposure mask generation is enabled. ExposeWarningThresholdUnder is a value between 0.0 and 1.0 so it is independend oof the bitdepth of the image
            </summary>                
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ClipWarningMaskEnabled">
            <summary>
            enable the clip warning mask. For this setting to  be used the mask image must be enabled and provided when processing the image         
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.ClipWarningCount">
            <summary>
            Set the minimum required count of neighbour pixels that must be outside the threshold limits to be set in the clip warning mask. For this to take effect the mask image must be enabled .
            ClipWarningCount is a value between 1 and 8. 
            </summary>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetOutputFormat(P1.ImageSdk.BitmapFormat)">
            <summary>
            Set the pixel format for the output image.
            </summary>
            <param name="format">The format enum, defining the RGB pixel format</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.OutputFormat">
            <summary>
            Gets the current configured pixel format, that this config object will produce
            </summary>
            <returns>The pixel format enum</returns>
        </member>
        <member name="P:P1.ImageSdk.ConvertConfig.CanvasClip">
            <summary>
            Configures the Canvas Clipping for the conversion
            </summary>
            <remarks>
            <para>When the Geometric Correction is being applied the image may have curved edges.
            As all output image is expected to be rectangular, this doesn't fit into the representation model.
            This parameter tells the rendering engine how to handle this situation.</para>
            <para>When all the recorded data is being rendered, the output image might </para>
            </remarks>
            <param value="CanvasClipNone">Canvas has the full RAW image, and renders the missing data as white.</param>
            <param value="CanvasClipWarpLoose">Canvas containst the largest upright rectangle fit into the warped image. 
            This value will make sure that all pixels in the output image is valid, but may loose some recorded data at the edges.</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetCanvasClip(P1.ImageSdk.CanvasClip)">
            <summary>
            Sets the <see cref="P:P1.ImageSdk.ConvertConfig.CanvasClip">CanvasClip</see> property
            </summary>
            <param value="CanvasClipNone">Canvas has the full RAW image, and renders the missing data as white.</param>
            <param value="CanvasClipWarpLoose">Canvas containst the largest upright rectangle fit into the warped image. 
            This value will make sure that all pixels in the output image is valid, but may loose some recorded data at the edges.</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetCrop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Configure for cropping the raw-image
            </summary>
            <remarks>
            <para>Offsets are with respects to the upper left corner. Positive Y direction is
            downwards.</para>
            <para>The resulting crop might differ slightly from your defined parameters. This
            is the defined behavior of our resampling algorithm. Always use the
            image width/height from resulting <see cref="T:P1.ImageSdk.BitmapImage"/>.</para>
            </remarks>
            <param name="x">X pixel offset in source image</param>
            <param name="y">Y pixel offset in source image</param>
            <param name="width">Pixel width in source image</param>
            <param name="height">Pixel height in source image</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetCrop(P1.ImageSdk.Rect)">
            <summary>
            Configure for cropping the raw-image
            </summary>
            <remarks>
            <para>Offsets are with respects to the upper left corner. Positive Y direction is
            downwards.</para>
            <para>The resulting crop might differ slightly from your defined parameters. This
            is the defined behavior of our resampling algorithm. Always use the
            image width/height from resulting <see cref="T:P1.ImageSdk.BitmapImage"/>.</para>
            </remarks>
            <param name="cropRect">The rectangle to crop to, in the source image</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.ResetCrop">
            <summary>
            Reset (remove) any applied crop
            </summary>
            <remarks>This helper method allows you to remove a crop, without knowning the target image dimensions.</remarks>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.ResetOutputScaling">
            <summary>
            Convenience method to reset (remove) any scaling.
            </summary>
            <remarks>This method reverts any previous calls to: <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputScale(System.Double)"/>, <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputWidth(System.Int32)"/> &amp; <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputHeight(System.Int32)"/>.</remarks>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetOutputScale(System.Double)">
            <summary>
            Configure scaling of the raw-image
            </summary>
            <remarks>
            <para>The resulting resizing might be slightly larger than can be attributed to
            rounding errors. This is the defined behavior of our resampling algorithm.</para>
            <para>Always use the image width/height from resulting <see cref="T:P1.ImageSdk.BitmapImage"/>.</para>
            </remarks>
            <param name="scaleFactor">Scaling factor. 0.99 is 99%, 0.01 is %1 (0 &lt; valid input).</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetOutputWidth(System.Int32)">
            <summary>
            Configures the output scaling using an absolute output <em>width</em>. Height is automatically calculated from the aspect ratio.
            </summary>
            <remarks>
            <para>THis method overwrite any previous calls to <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputScale(System.Double)"/> and <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputHeight(System.Int32)"/></para>
            <para>The image processing uses the output width as a guide, meaning that it
            will keep aspect ratio of the output image.</para><para>Also, the final output size might be larger
            by a few pixels, to allow the processing algorithms to use optimizations.</para>
            <para>Always use the image width/height from resulting <see cref="T:P1.ImageSdk.BitmapImage"/>.</para>
            </remarks>
            <param name="destinationWidth">The output image width in pixels</param>
            <returns>This object itself (this), to allow chaining</returns>
            
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetOutputHeight(System.Int32)">
            <summary>
            Configures the output scaling using an absolute output <em>height</em>. Width is automatically calculated from the aspect ratio.
            </summary>
            <remarks>
            <para>This method overwrite any previous calls to <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputScale(System.Double)"/> and <see cref="M:P1.ImageSdk.ConvertConfig.SetOutputWidth(System.Int32)"/></para>
            <para>The image processing uses the output height as a guide, meaning that it
            will keep aspect ratio of the output image.</para><para>Also, the final output size might be larger
            by a few pixels, to allow the processing algorithms to use optimizations.</para>
            <para>Always use the image width/height from resulting <see cref="T:P1.ImageSdk.BitmapImage"/>.</para>
            </remarks>
            <param name="destinationHeight">The output image height in pixels</param>
            <returns>This object itself (this), to allow chaining</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetContrast(System.Single)">
            <summary>
            Adjust the contrast of the image 
            </summary>
            <param name="contrast">is a value between -1.0 and 1.0. Default is 0.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetBrightness(System.Single)">
            <summary>
            Adjust the brightness of the image 
            </summary>
            <param name="brightness">is a value between -1.0 and 1.0. Default is 0.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetSaturation(System.Single)">
            <summary>
            Adjust the saturation of colors in the image 
            </summary>
            <param name="saturation">is a value between -1.0 and 1.0. Default is 0.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetExposure(System.Single)">
            <summary>
            Adjust th exposure of the image. This is doing almost the same as the SetGain but using an exponential function.   
            </summary>
            <param name="exposure">is a value between -4.0 and 4.0. Default is 0.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetGain(System.Single)">
            <summary>
            Adjust the gain of the image. This is doing almost the same as SetExposure but just as a linear gain value.
            </summary>
            <param name="gain">Its a floating point value. Default is 1.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetBlackLevel(System.Single,System.Single,System.Single)">
            <summary>
            Set the black level. This is a color that is regarded as black as in the level tool of most image editors  
            </summary>
            <param name="r">is a value between 0 and 1.0. Default is 0.0</param>        
            <param name="g">is a value between 0 and 1.0. Default is 0.0</param>        
            <param name="b">is a value between 0 and 1.0. Default is 0.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetMidtoneLevel(System.Single,System.Single,System.Single)">
            <summary>
            Set the midtone level. This is a color that is used as 50% level of the color values. Known from the level tool of most image editors  
            </summary>
            <param name="r">is a value between -1.0 and 1.0. Default is 0.0</param>
            <param name="g">is a value between -1.0 and 1.0. Default is 0.0</param>
            <param name="b">is a value between -1.0 and 1.0. Default is 0.0</param>
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetWhiteLevel(System.Single,System.Single,System.Single)">
            <summary>
            Set the white level. This is a color that is regarded as white. Known from the level tool of most image editors  
            </summary>
            <param name="r">is a value between 0 and 1.0. Default is 1.0</param>        
            <param name="g">is a value between 0 and 1.0. Default is 1.0</param>        
            <param name="b">is a value between 0 and 1.0. Default is 1.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetSharpeningAmount(System.Single)">
            <summary>
            Adjust the amount of sharpening of the image. 
            </summary>
            <param name="sharpeningAmount">is a value between -4.0 and 4.0. Default is 0.0</param>          
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetNoiseReductionRadiusAmount(System.Int32)">
            <summary>
            Sets the pixel radius used for the Noise Reduction algorithm to reduce noise. 
            </summary>
            <param name="noiseReductionRadius">is a value between 0 and 32.0. Default is 0</param>          
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetClarity(System.Int32,System.Single)">
            <summary>
            Setup the clarity tool. Its used as a tool to help control the local contrast in the image. A negative value will decrease local contrast and and positive increase it. 
             Its a combination of selecting a method and a factor (amount) 
            </summary>
            <param name="clarityMethod"> It can be set to: clarityMethodNeutral = 0, clarityMethodPunch=1, clarityMethodNatural=2. Default is clarityMethodNeutral</param>        
            <param name="clarityFactor"> Value defining the factor used for the clarity tool. It is a value between -1.0 and 1.0. Default is 0.0 for disabled</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetShadowRecovery(System.Single)">
            <summary>
             Set shadow recovery. Used to extract details only in the shadows of the image by making them brighter. 
            </summary>
            <param name="shadowRecovery"> is a value to control how much effect is wanted. The value can be between 0.0 and 1.0. Default is 0.0 (=disabled)</param>          
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetHighlightRecovery(System.Single)">
            <summary>
            Set highlight recovery. Used to extract details only in the highlights of the image by reducing the brightness of highlight pixels.
            </summary>
            <param name="highlightRecovery"> is a value to control how much effect is wanted. The value can be between 0.0 and 1.0. Default is 0.0 (=disabled)</param>          
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetWhiteBalanceGain(System.Single,System.Single,System.Single)">
            <summary>
            Sets the White Balance as gain for each channels (RGB)   
            </summary>
            <param name="redGain">is a value between 0 and 10.0. Default is 0.0</param>        
            <param name="greenGain">is a value between 0 and 10.0. Default is 0.0</param>        
            <param name="blueGain">is a value between 0 and 10.0. Default is 0.0</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetGeometricCorrectionEnabled(System.Boolean)">
            <summary>
            Sets the Enabled state of the Geometric Aberration correction
            </summary>
            <param name="enabled"> true will enable Geometric Aberration correction, false will disable it</param>          
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetGeometricCorrection(P1.ImageSdk.GeometricCorrection)">
            <summary>
            Sets Geometric Aberration correction parameters to be applied.
            <remarks>
            <para>
            If geometricCorrection is set to an invalid value, the the conversion will try to load the geometric correction data embedded in the source IIQ file
            </para>
            </remarks>
            </summary>
            <param name="geometricCorrection"> the geometric correction to be used for the algorithm.</param>          
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetEnableLinearPath(System.Boolean)">
            <summary>
            Set EnableLinearPath setting. This setting is used to disable most of the processing steps to make sure that the debayering of the image into rgb domain is done
            only using a simple linear mapping enabling only the minimum needed processing.
            </summary>
            <param name="enabled"> it can be set to true or false. False is the default value.</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetHistogramStage(P1.ImageSdk.HistogramStage)">
            <summary>
            Request in which stage of the processing pipeline a histogram must be sampled (its mainly used for debugging). Default is to not sample a histogram
             Its a combination of selecting a method and a factor (amount) 
            </summary>
            <param name="stage"> is a value defining the stage in processing where histogram is sampled</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetExposureMaskThreshold(System.Single,System.Single)">
            <summary>
            Threshold for exposure mask 
            </summary>
            <remarks>
            <para> The masking image is return as outputMaskImage </para>
            </remarks>
            <param name="overExposureThreshold">Over exposure threshold, range 0.0 to 1.0</param>
            <param name="underExposureThreshold">Under exposure threshold, range 0.0 to 1.0</param>
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetMaskThresholdClipWarningCount(System.Int32)">
            <summary>
            Threshold for clipping count 
            </summary>
            <remarks>
            <para> Number of neighboring pixel that are clipped </para>
            </remarks>
            <param name="count">The number of neighboring pixels of a clipped area to be marked as clipped</param>
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetRedCurve(P1.ImageSdk.Point2D[])">
            <summary>
            Set the curve for red values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated. 
            </summary>
            <param name="points"> is an array of discreete coordinate pairs (x,y) in the range (0.0,0.0)-(1.0,1.0). Default is a linear mapping (0.0,0.0)-(1.0,1.0)</param>        
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetGreenCurve(P1.ImageSdk.Point2D[])">
            <summary>
            Set the curve for green values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <param name="points"> is an array of discreete coordinate pairs (x,y) in the range (0.0,0.0)-(1.0,1.0). Default is a linear mapping (0.0,0.0)-(1.0,1.0)</param>        
            <returns></returns>        
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetBlueCurve(P1.ImageSdk.Point2D[])">
            <summary>
            Set the curve for blue values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <param name="points"> is an array of discreete coordinate pairs (x,y) in the range (0.0,0.0)-(1.0,1.0). Default is a linear mapping (0.0,0.0)-(1.0,1.0)</param>        
            <returns></returns>        
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetLumaCurve(P1.ImageSdk.Point2D[])">
            <summary>
            Set the curve for luma values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <param name="points"> is an array of discreete coordinate pairs (x,y) in the range (0.0,0.0)-(1.0,1.0). Default is a linear mapping (0.0,0.0)-(1.0,1.0)</param>        
            <returns></returns>        
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SetRgbCurve(P1.ImageSdk.Point2D[])">
            <summary>
            Set the curve for rgb values as known from the curves tool in most image editors. The curve is defined as a vector of discreete coordinate pairs (x,y) that is interpolated.
            </summary>
            <param name="points"> is an array of discreete coordinate pairs (x,y) in the range (0.0,0.0)-(1.0,1.0). Default is a linear mapping (0.0,0.0)-(1.0,1.0)</param>        
            <returns></returns>        
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.newFromFile(System.String)">
            <summary>
            Creates a ConvertConfig object from a persisted model located at filePath
            </summary>
            <remarks>The underlying function throws</remarks>
            <param name="filePath">The full path of the file the persisted data is located</param>
            <returns>A new ConvertConfig object with the settings stored in the file</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.SaveToFile(System.String)">
            <summary>
            Stores the ConvertConfig object to a persisted model located at filePath
            </summary>
            <remarks>The underlying function throws</remarks>
            <param name="filePath">The full path of the file the persisted data will be saved</param>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.Serialize">
            <summary>
            Returns a serialized JSON representation of the ConvertConfig object
            </summary>
            <remarks>The underlying function throws</remarks>
            <returns>A well-formed JSON representing the ConvertConfig object</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.Deserialize(System.String)">
            <summary>
            Creates a ConvertConfig object from a well-formed JSON string
            </summary>
            <param name="json">The well-formed JSON input representing the ConvertConfig object</param>
            <remarks>The underlying function throws</remarks>
            <returns>A new ConvertConfig object</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.ApplyTo(P1.ImageSdk.RawImage,System.Func{System.UInt32,System.Byte[]})">
            <summary>
            Trigger processing of the applied options on the raw-image and return a new image as an RGB bitmap
            </summary>
            <remarks>
            <para>By default the memory for the converted image is allocated by using C# new operator.
            However, you can provide your own allocator function, to allow re-using existing buffers.
            The memory allocator callback function takes the requested buffer size in bytes, and must
            return a byte array, byte[].</para>
            </remarks>
            <param name="image">The source image to apply the configured decoding to</param>
            <param name="allocFunction">An optional memory allocator function</param>
            <returns>The new processed image as a bitmap object</returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.ApplyTo(P1.ImageSdk.RawImage,P1.ImageSdk.BitmapImage@,System.Func{System.UInt32,System.Byte[]})">
            <summary>
            Trigger processing of the applied options on the raw-image and return a new image as an RGB bitmap
            </summary>
            <param name="image">The source image to apply the configured decoding to</param>
            <param name="maskImage">Output exposure masking image</param>
            <param name="allocFunction">An optional memory allocator function</param>
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.ConvertConfig.Discretize(P1.ImageSdk.Point2D[],System.UInt16)">
            <summary>
            Returns a list of 'Y' values of the Curve defined by the input Points. This is applicable for the RGB/LumaCurve)
            </summary>
            <param name="points">the list of points defining the Curve</param>
            <param name="bits">The resolution of the return value. Valid range: [0,12]</param>
            <returns>A vector of the Y values of the evenly distributed between the two end points of the range [0, 1)</returns>
        </member>
        <member name="T:P1.ImageSdk.BlackClamp">
            <summary>
            Setting to control the static calibration type called black clamping
            </summary>
        </member>
        <member name="F:P1.ImageSdk.BlackClamp.On">
            <summary>
            Apply black clamping to the pixel values
            </summary>
        </member>
        <member name="F:P1.ImageSdk.BlackClamp.Off">
            <summary>
            Do not black clamp pixel values
            </summary>
        </member>
        <member name="F:P1.ImageSdk.BlackClamp.Default">
            <summary>
            Let the framework decide on whether to black clamp pixel values, or not
            </summary>
        </member>
        <member name="T:P1.ImageSdk.DigitalOffset">
            <summary>
            Setting to control how the static calibration handles digital offsets
            </summary>
        </member>
        <member name="F:P1.ImageSdk.DigitalOffset.Subtract">
            <summary>
            Substract the the digital offset from the pixel values
            </summary>
        </member>
        <member name="F:P1.ImageSdk.DigitalOffset.Keep">
            <summary>
            Leaves the offset as-is
            </summary>
        </member>
        <member name="F:P1.ImageSdk.DigitalOffset.Default">
            <summary>
            Let the framework decide on whether digital offset are substracted from pixel values, or not
            </summary>
        </member>
        <member name="T:P1.ImageSdk.DecodeConfig">
            <summary>
            Defines a set of decoding flags, that can be used on a raw image
            </summary>
            <remarks>
            <para>This class lets you configure decoding options and decode an raw image.
            You obtain an instance of this class be using <see cref="M:P1.ImageSdk.RawImage.Decode(P1.ImageSdk.DecodeConfig,System.Func{System.UInt32,System.Byte[]})"/>.
            After calls to decoding option methods like <see cref="M:P1.ImageSdk.DecodeConfig.BlackLeveling(P1.ImageSdk.BlackClamp,P1.ImageSdk.DigitalOffset)"/>,
            you must call <see cref="M:P1.ImageSdk.DecodeConfig.ApplyTo(P1.ImageSdk.RawImage,System.Func{System.UInt32,System.Byte[]})"/> to trigger the actual decoding.</para>
            <para>This class handles only decoding and/or decompressing raw image
            data, not raw convertion. For raw converyion see <see cref="T:P1.ImageSdk.ConvertConfig"/>.</para>
            </remarks>
            <example>
            // Simple one-liner raw file decompression, and custom static calibration
            var rawBitmap = new DecodeConfig().BlackLeveling(BlackClamp.Default, DigitalOffset.Keep).AppleTo(new RawImage("some-file.iiq"));
            </example>
            <seealso cref="M:P1.ImageSdk.RawImage.Decode(P1.ImageSdk.DecodeConfig,System.Func{System.UInt32,System.Byte[]})"/>
        </member>
        <member name="M:P1.ImageSdk.DecodeConfig.#ctor">
            <summary>
            Creates a new decoding options object, with no options configured
            </summary>
        </member>
        <member name="M:P1.ImageSdk.DecodeConfig.BlackLeveling(P1.ImageSdk.BlackClamp,P1.ImageSdk.DigitalOffset)">
            <summary>
            Control how to calibrate pixel's black point, using black clamping and digital offset 
            </summary>
            <param name="clamp"></param>
            <param name="digitalOffset"></param>
        </member>
        <member name="M:P1.ImageSdk.DecodeConfig.ApplyTo(P1.ImageSdk.RawImage,System.Func{System.UInt32,System.Byte[]})">
            <summary>
            Trigger decoding of the applied options on the raw-image and return a new image as a RAW data bitmap
            </summary>
            <remarks>
            <para>By default the memory for the decoded image is allocated by using C# new operator.
            However, you can provide your own allocator function, to allow re-using existing buffers.
            The memory allocator callback function takes the requested buffer size in bytes, and must
            return a byte array, byte[].</para></remarks>
            <param name="image">The source image to apply the configured decoding to</param>
            <param name="allocFunction">An optional memory allocator function</param>
            <returns>The new processed image as a bitmap object</returns>
        </member>
        <member name="M:P1.ImageSdk.DecodeConfig.Defaults">
            <summary>
            Returns a predefined config object, with sensibel options enabled already
            </summary>
        </member>
        <member name="T:P1.ImageSdk.GpsDateTimeComponents">
            <summary>
            A date &amp; time representation used by the GPS to provide sub-millisecond precision
            </summary>
            <remarks>
            <para>Note that the <em>date</em> part might not be present. (The presence depends on the GPS module used)
            See <see cref="F:P1.ImageSdk.GpsDateTimeComponents.HasDate"/> to check you date fields contains something meaningful.</para>
            <para>The <em>timezone</em> is always GMT/UTC. However, the clock used (or time scale) might 
            not be UTC.</para>
            <para>GPS uses its own timescale (or clock) called <em>GPS Time</em>. It branched out from UTC in 1980,
            and has since lept ahead of UTC. The reason is that <em>GPS Time</em> does not account for the leap
            seconds added to UTC (since 1980).</para>
            <para>The field <see cref="F:P1.ImageSdk.GpsDateTimeComponents.IsGpsTime"/> tells you if the timestamp is in <em>GPS Time</em> and not <em>UTC</em>.
            By January 1st, 2017, the differnce between GPS Time and UTC is: GPS - UTC = +18 seconds.</para>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.HasDate">
            <summary>True if a date value has been supplied by the GPS device</summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.Year">
            <summary>
            Year with 4 digits
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.Month">
            <summary>
            Month of year, 1-12
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.Day">
            <summary>
            Day of month, 1-31
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.Hours">
            <summary>
            Hours, 0-23
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.Minutes">
            <summary>
            Minutes, 0-59
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.Seconds">
            <summary>
            Number of seconds 0-59, with decimals
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GpsDateTimeComponents.IsGpsTime">
            <summary>
            If <c>true</c>, then time is provided in <em>GPS Time</em>.
            If <c>false</c>, time is UTC.
            </summary>
        </member>
        <member name="M:P1.ImageSdk.GpsDateTimeComponents.ToTimeSpan">
            <summary>
            Get a TimeSpan representation. However, precision is lost - since TimeSpan resolution is milliseconds
            </summary>
        </member>
        <member name="M:P1.ImageSdk.GpsDateTimeComponents.ToDateTime">
            <summary>
            Get a DateTime from the GPS date-time stamp (in UTC). Some GPS devices might not supply
            a date value. If so, this method returns NULL.
            </summary>
        </member>
        <member name="M:P1.ImageSdk.GpsDateTimeComponents.ToString">
            <summary>
            Get as a human readable string representation
            </summary>
        </member>
        <member name="T:P1.ImageSdk.GpsData">
            <summary>
            A GPS data bundle, that defines an auxillary GPS's position on earth, along with a date-time stamp
            </summary>
            <remarks>
            <para>Coordinates are stored in degrees and minutes (of arc) with decimals. (No seconds of arc components.)</para>
            <para>Conveniece properties <see cref="P:P1.ImageSdk.GpsData.LatitudeAsDecimal"/> and <see cref="P:P1.ImageSdk.GpsData.LongitudeAsDecimal"/>, returns the 
            the decimal degrees representation. These are calculated using the formular: <c>decimalDegrees = degrees + minutes / 60</c></para>
            <para>There are no convenience converters for convertion to a degree, minute &amp; second representation. 
            However, the seconds components can be calculated from the minutes: <c>seconds = (minutes - floor(minutes)) * 60</c></para>
            <para>The GPS timestamp might not contain a date component.
            This depends on the GPS device used, when the IIQ file was created. The member <see cref="F:P1.ImageSdk.GpsDateTimeComponents.HasDate"/>
            defines if date components (year, month, day) are present.</para>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.GpsData.GpsDateTimeStamp">
            <summary>The date and time for when the location data was collected</summary>
        </member>
        <member name="F:P1.ImageSdk.GpsData.LatitudeDegrees">
            <summary>North-South point in (integer) degrees from -90 (South Pole) or +90 (North Pole)</summary>
        </member>
        <member name="F:P1.ImageSdk.GpsData.LatitudeMinutes">
            <summary><em>Minute of arc</em> part of the latitude coordinate (North-South)</summary>
        </member>
        <member name="P:P1.ImageSdk.GpsData.LatitudeAsDecimal">
            <summary>Return <em>degrees only</em> latitude coordinate. (Degrees with decimals)</summary>
        </member>
        <member name="F:P1.ImageSdk.GpsData.LongitudeDegrees">
            <summary>East-West point in (integer) degrees from -180 (West) to +180 (East), where 0 is near Greenwich, England</summary>
        </member>
        <member name="F:P1.ImageSdk.GpsData.LongitudeMinutes">
            <summary><em>Minute of arc</em> part of the longitude coordinate (East-West)</summary>
        </member>
        <member name="P:P1.ImageSdk.GpsData.LongitudeAsDecimal">
            <summary>Return <em>degrees only</em> longitude coordinate. (Degrees with decimals)</summary>
        </member>
        <member name="F:P1.ImageSdk.GpsData.AltitudeMeters">
            <summary>Height of camera in meters, above sea level. Negative values means, below sea level.</summary>
        </member>
        <member name="M:P1.ImageSdk.GpsData.ToString">
            <summary>
            Represent object as a human readable string
            </summary>
        </member>
        <member name="T:P1.ImageSdk.YawReference">
            <summary>Definition of possible reference points for the Yaw axis</summary>
        </member>
        <member name="F:P1.ImageSdk.YawReference.Undefined">
            <summary>The Yaw reference is not known</summary>
        </member>
        <member name="F:P1.ImageSdk.YawReference.TrueNorth">
            <summary>Yaw is relative to <em>True North</em>. (In constract to <em>Magnetic North</em>)</summary>
        </member>
        <member name="T:P1.ImageSdk.ImuData">
            <summary>
            An IMU data bundle, that defines the orientation of an auxillary IMU in space
            </summary>
            <remarks>
            <para>If the camera has been been fitted with an IMU, this is the IMU orientation snapshot 
            when the image was taken.</para>
            <para>The orientation is defined by the principal axes yaw, pitch and roll expressed 
            in degrees.</para>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.ImuData.Yaw">
            <summary>Rotation on the vertical axis, where positive direction is clock-wise.</summary>
        </member>
        <member name="F:P1.ImageSdk.ImuData.Pitch">
            <summary>Rotation on the tranversal axis, (wingtip to wingtip), positive direction raises the aircraft's nose.</summary>
        </member>
        <member name="F:P1.ImageSdk.ImuData.Roll">
            <summary>Rotation on the longitudinal axis (aircraft's nose to tail), positive direction lifts the left wing, and lowers the right.</summary>
        </member>
        <member name="F:P1.ImageSdk.ImuData.YawRef">
            <summary>The definition of the Yaw reference point</summary>
            <seealso cref="T:P1.ImageSdk.YawReference"/>
        </member>
        <member name="M:P1.ImageSdk.ImuData.ToString">
            <summary>
            Represent as a human readable string
            </summary>
        </member>
        <member name="T:P1.ImageSdk.RawHistogramData">
            <summary>
            A simple histogram class that is used for both Raw- and Rgb- histograms. 
            </summary>
        </member>
        <member name="T:P1.ImageSdk.ImageTagCategory">
            <summary>
            Defines the different embedded images inside a IIQ container file 
            </summary>
        </member>
        <member name="T:P1.ImageSdk.ImageTagType">
            <summary>
            Available Image tag data types
            </summary>
        </member>
        <member name="T:P1.ImageSdk.ImageTag">
            <summary>
            A wrapper around an image <em>meta data</em> tag. (Tiff, Exif and others)
            </summary>
            <remarks>
            <para>IIQ files contain meta data tags following multiple paradigms.
            Some tags are defined by the Tiff format standard, some by Exif and
            yet some are Phase One proprietary tags.</para>
            <para>This class represents data contained in all such types of tags.
            See the class <see cref="P:P1.ImageSdk.ImageTag.TagId"/>, that identify all 3 kind of tags.</para>
            <para>Each tag has a <em>type</em> and a <em>count</em>, and some raw data. 
            The <em>count</em> is used only to represent vector data types or fractions.
            (A vector of 2: numerator &amp; denominator.)</para>
            </remarks>
            <seealso cref="P:P1.ImageSdk.ImageTag.TagId"/>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.TagId">
            <summary>
            The tag ID, as defined by either Tiff, Exif or Phase One stardard
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.Type">
            <summary>
            The data-type of this meta data tag.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.Count">
            <summary>
            If this tag represents a vector, this is the number of elements
            in the vector.
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.ByteSize">
            <summary>
            The size of the meta data tag in bytes
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.Data">
            <summary>
            Get the raw data value of this tag
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.StringValue">
            <summary>
            Get a string with the value of this meta data tag.
            (only for ASCII and BYTE types)
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.IntValue">
            <summary>
            Get the signed integer value of this tag
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.UIntValue">
            <summary>
            Get the unsigned integer value of this tag
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.DoubleValue">
            <summary>
            Return the value for tag types: double, float and rationals - as a double
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.RationalValue">
            <summary>
            Get the signed rational (fraction representation) value of this meta data tag
            </summary>
        </member>
        <member name="P:P1.ImageSdk.ImageTag.URationalValue">
            <summary>
            Get the unsigned rational (fraction representation) value of this meta data tag
            </summary>
        </member>
        <member name="M:P1.ImageSdk.ImageTag.op_Explicit(P1.ImageSdk.ImageTag)~System.Byte">
            <summary>
            Explicit operator converting a ImageTag to a byte. 
            Requires that the ImageTag is type byte.
            If not, an SdkException is thrown with the error-code 
            kErrorPropertyTypeInvalid.
            </summary>
            <param name="tag">The tag to get byte value from</param>
        </member>
        <member name="T:P1.ImageSdk.Rational">
            <summary>
            Representation of a rational number, stored as a fraction
            </summary>
        </member>
        <member name="P:P1.ImageSdk.Rational.DecimalValue">
            <summary>
            Convert this fraction to a double (decimal) form
            </summary>
        </member>
        <member name="T:P1.ImageSdk.GeoTiffKey">
            <summary>
            <para>
            The IDs of the supported GeoTiff tags
            </para>
            <para>
            Please see Chapter 7. Requirements and Annex E in the <a href="https://www.ogc.org/standards/geotiff">GeoTiff specification</a> for details of the supported keys
            </para>
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffKey.GTModelType">
            <summary>
            Defines the model coordinate reference system. See also the <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_requirements_class_gtmodeltypegeokey">requirements</a>.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffKey.GTRasterType">
            <summary>
            Defines is a raster is an area or a point. See also the <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_requirements_class_gtrastertypegeokey">requirements</a>.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffKey.GTCitation">
            <summary>
            Optional generic Citation of the GeoTiff file. See also the <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_requirements_class_citation_geokeys">requirements</a>.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffKey.GeoTiffModelPixelScaleTag">
            <summary>
            Describes the raster space and model space relation together with the <b>GeoTiffModelTiepointTag</b> tag. See also the <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_requirements_class_modelpixelscaletag">requirements</a> and <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_coordinate_transformations">details of the coordinate transformation</a>. 
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffKey.GeoTiffModelTiepointTag">
            <summary>
            Describes the raster space and model space relation along with the GeoTiffModelPixelScaleTag tag. See also the <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_requirements_class_modeltiepointtag">requirements</a>.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffKey.GeoTiffModelTransformationTag">
            <summary>
            Describes the raster space and model space relation with an affine transformation. See also the <a href="http://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_requirements_class_modeltransformationtag">requirements</a>.
            </summary>
        </member>
        <member name="T:P1.ImageSdk.GeoTiffValueType">
            <summary>
            The different value types supported by GeoTIFF specification
            </summary>
        </member>
        <member name="T:P1.ImageSdk.GeoTiffField">
            <summary>
            The description of a GeoTIFF field
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffField.key">
            <summary>
            The key of the GeoTIFF Field
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffField.valueType">
            <summary>
            The value type of the GeoTIFF Field
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffField.value">
            <summary>
            In case the value type is GeoTiffValueTypeShort with a single value, the value should be stored in this property
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffField.stringValue">
            <summary>
            In case the value type is GeoTiffValueTypeASCII, the value should be stored in this property
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffField.doubleArrayValue">
            <summary>
            In case the value type is GeoTiffValueTypeDouble, the value should be stored in this property
            </summary>
        </member>
        <member name="F:P1.ImageSdk.GeoTiffField.shortArrayValue">
            <summary>
            In case the value type is GeoTiffValueTypeShort with multiple values, the value should be stored in this property
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.includeExif">
            <summary>
            If the export should copy the EXIF tags (except GPS) from the source image
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.includeGps">
            <summary>
            If the export should copy the GPS tags from the source image
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.includeXmp">
            <summary>
            If the export should copy the XMP block from the source image
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.includeIptc">
            <summary>
            If the exported image should include a minumum IPTC block (date and time)
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.generateNewPreview">
            <summary>
            If the exported image should have a preview included
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.xmpSize">
            <summary>
            The byte size of the XMP block
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.iccProfileData">
            <summary>
            The ICC color profile data
            </summary>
        </member>
        <member name="F:P1.ImageSdk.ImageExportCommonConfig.geoTiffFieldList">
            <summary>
            The list of <see cref="T:P1.ImageSdk.GeoTiffField"/> values to be included in the exported GeoTiff
            </summary>
        </member>
        <member name="T:P1.ImageSdk.Color">
            <summary>
            A three channel color defined as Red, Green and Blue amount
            </summary>
        </member>
        <member name="T:P1.ImageSdk.RawImage">
            <summary>
            A handle to an IIQ image file, either on the file system or in a memory buffer
            </summary>
        </member>
        <member name="P:P1.ImageSdk.RawImage.Width">
            <summary>
            Get the image width, in pixels, of the exposed sensor area
            </summary>
        </member>
        <member name="P:P1.ImageSdk.RawImage.Height">
            <summary>
            Get the image height, in pixels, of the exposed sensor area
            </summary>
        </member>
        <member name="P:P1.ImageSdk.RawImage.RawSensorWidth">
            <summary>
            Get full width of the raw sensor output in pixels (including un-exposed area)
            </summary>
        </member>
        <member name="P:P1.ImageSdk.RawImage.RawSensorHeight">
            <summary>
            Get full height of the raw sensor output in pixels (including un-exposed area)
            </summary>
        </member>
        <member name="M:P1.ImageSdk.RawImage.#ctor(System.Byte[])">
            <summary>
            Create a RawImage object from an in-memory IIQ file
            </summary>
            <param name="iiqFileBuffer">Content of a IIQ file</param>
            <seealso cref="M:P1.ImageSdk.RawImage.#ctor(System.String)"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create a RawImage object from an in-memory IIQ file
            </summary>
            <param name="iiqFileBuffer">A pointer to the un-managed memory, where the image data resides</param>
            <param name="bufferByteSize">The size of the provided IIQ file buffer, in bytes</param>
            <seealso cref="M:P1.ImageSdk.RawImage.#ctor(System.Byte[])"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.#ctor(System.String)">
            <summary>
            Create a RawImage object from a system file path, to either a IIQ file
            </summary>
            <param name="iiqFilePath">Path to the IIQ file</param>
            <seealso cref="M:P1.ImageSdk.RawImage.#ctor(System.Byte[])"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.Decode(P1.ImageSdk.DecodeConfig,System.Func{System.UInt32,System.Byte[]})">
            <summary>
            Get a decode object, that handles decompression and
            static calibration of the RAW image.
            </summary>
            <remarks>
            <para>Use this method if you wish to extract the RAW image data from the IIQ file.
            You can configure the DeviceOptions object to just return the prestine sensor output,
            or you can choose to do some basic static calibration of the RAW data.</para>
            <para>By default the memory for the decoded image is allocated by using C# new operator.
            However, you can provide your own allocator function, to allow re-using existing buffers.
            The memory allocator callback function takes the requested buffer size in bytes, and must
            return a byte array, byte[].</para>
            </remarks>
            <param name="config">The Decode pipeline config to use when decoding the image</param>
            <param name="allocFunction">An optional memory allocator function</param>
            <returns>Options object for getting RAW data</returns>
            <seealso cref="M:P1.ImageSdk.RawImage.Convert(P1.ImageSdk.ConvertConfig,System.Func{System.UInt32,System.Byte[]})"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.Convert(P1.ImageSdk.ConvertConfig,System.Func{System.UInt32,System.Byte[]})">
            <summary>
            Get a processing object, that handles RAW convertion of the image
            into an RGB bitmap
            </summary>
            <remarks>
            <para>Use this method if you wish to obtain an RGB (RAW converted) bitmap image from the
            IIQ file. You can choose to add any calibration and / or image filters on the
            output RGB bitmap.</para>
            <para>By default the memory for the converted image is allocated by using C# new operator.
            However, you can provide your own allocator function, to allow re-using existing buffers.
            The memory allocator callback function takes the requested buffer size in bytes, and must
            return a byte array, byte[].</para>
            </remarks>
            <param name="config">The convert pipeline configuration to use when converting the image</param>
            <param name="allocFunction">An optional memory allocator function</param>
            <returns>Options object for getting RGB bitmap images and exposure mask</returns>
            <seealso cref="M:P1.ImageSdk.RawImage.Decode(P1.ImageSdk.DecodeConfig,System.Func{System.UInt32,System.Byte[]})"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.Convert(P1.ImageSdk.ConvertConfig,P1.ImageSdk.BitmapImage@,System.Func{System.UInt32,System.Byte[]})">
            <summary>
            Get a processing object, that handles RAW convertion of the image into an RGB bitmap
              and also compute exposure mask if the threshold is set by user
            </summary>
            <param name="config">The convert pipeline configuration to use when converting the image</param>
            <param name="maskImage">Bitmap image that contain exposure mask</param>
            <param name="allocFunction">An optional memory allocator function</param>
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetTag(P1.ImageSdk.TagId)">
            <summary>
            Get a metadata tag from the image file
            </summary>
            <remarks>
            <para>To avoid catching exceptions, in case of missing tags - use the method <see cref="M:P1.ImageSdk.RawImage.TagExists(P1.ImageSdk.TagId)"/>
            to check if tags are present in the image file.</para>
            <para>Generally you should regard all tags as optional, since their presence might change with camera
            models and firmware versions.</para>
            </remarks>
            <param name="tagId">The tag identifier</param>
            <returns>The tag object, if found. (Throws if tag is not found)</returns>
            <seealso cref="T:P1.ImageSdk.TagId"/>
            <seealso cref="M:P1.ImageSdk.RawImage.TagExists(P1.ImageSdk.TagId)"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.TagExists(P1.ImageSdk.TagId)">
            <summary>
            Check if a metadata tag exists in the image file
            </summary>
            <remarks>
            <para>Generally you should regard all tags as optional, since their presence might change with camera
            models and firmware versions.</para>
            </remarks>
            <param name="tagId">The tag identifier</param>
            <returns><c>true</c> if the tag exists in the image file, <c>false</c> otherwise</returns>
            <seealso cref="T:P1.ImageSdk.TagId"/>
            <seealso cref="M:P1.ImageSdk.RawImage.GetTag(P1.ImageSdk.TagId)"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetPreview">
            <summary>
            Get the thumbnail from the raw file container
            </summary>
            <returns>A bitmap object with byte[] data and image dimensions</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetCanvasDimensions(P1.ImageSdk.ConvertConfig)">
            <summary>
            Returns the Canvas Dimensions based on the input configuration
            </summary>
            <remarks>
            The raw image data goes through a set of transformations before it can be drawn on the screen / converted into a corrected file.
            Therefor a set of different coordinate systems are introduced. The Canvas Coordinate system is defined for the full resolution image
            with all the requested correction applied.
            This corrections currently consists of the Image Orientation and the Geometric Correction.
            The following values are considered from the ConvertConfig
            * CanvasClip
            * GeometricCorrectionEnabled
            </remarks>
            <param name="config">A ConvertConfig object containing the Geometry transformation the view was based upon</param>
            <returns>The width and height of the canvas</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetXmpPacket">
            <summary>
            Convenience method to get the XMP meta data
            </summary>
            <remarks>
            This method equivalent to using <see cref="M:P1.ImageSdk.RawImage.GetTag(P1.ImageSdk.TagId)"/> to get the <c>XmpPacket</c> tag Id, and trimming the output
            for extranous white space.
            </remarks>
            <returns>XML string</returns>
            <seealso cref="M:P1.ImageSdk.RawImage.GetGpsData"/>
            <seealso cref="M:P1.ImageSdk.RawImage.GetImuData"/>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetGpsData">
            <summary>
            Extract the GPS data embedded in the IIQ files XMP meta data section, if any
            </summary>
            <remarks>
            This is a convenience method. It is equal to using the <see cref="M:P1.ImageSdk.RawImage.GetXmpPacket"/> method,
            with parsing of the GPS data tags.
            </remarks>
            <returns>GPS coordinates object, or <c>null</c> of no GPS data is included in image</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetRawHistogramData">
            <summary>
            Extract the Raw histogram from the raw image. The histogram is generated in the camera and stored in the iqq file when it was captured.
            Therefore it is also in a format defined by the camera.
            </summary>
            <returns>A RawHistogramData object with the histogramdata</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetIceHistogramData">
            <summary>
            Extract an Rgb histogram that was generated while converting the image into Rgb bitmap. 
            It is possible to decide where in the convertion pipeline the histogram should be sampled
             by using the ConvertConfig function: SetHistogramStage.
             <remarks>
             This function is mainly used for debugging purposes.
             </remarks>      
            </summary>
            <returns>A RawHistogramData object with the histogramdata</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetGpsEventId">
            <summary>
            Extract the GPSEventId from the IIQ files XMP meta data section, if any
            </summary>
            <remarks>
            This is a convenience method. It is equal to using the <see cref="M:P1.ImageSdk.RawImage.GetXmpPacket"/> method,
            with parsing of the GPS data tags.
            </remarks>
            <returns>The GPSEventId, or <c>null</c> of no GPSEventId is included in image</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.GetImuData">
            <summary>
            Extract the IMU data embedded in the IIQ files XMP meta data section, if any
            </summary>
            <remarks>
            This is a convenience method. It is equal to using the <see cref="M:P1.ImageSdk.RawImage.GetXmpPacket"/> method,
            with parsing of the IMU data tags.
            </remarks>
            <returns>IMU orientation object, or <c>null</c> of no IMU data is included in image</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.PickWhiteBalanceGain(P1.ImageSdk.ConvertConfig,P1.ImageSdk.Point2D,System.Int32)">
            <summary>
            Generates a White Balance Gain value from a Point defined on the View
            </summary>
            <remarks>
            The recommended way to use this function is to present an Image on Screen for the user to select the Point to pick the White Balance Gain from.
            Using a pointing device the user could select the Point on that Image View. The coordinate system for that Point should match the Image View's coordinate system, assuming the origin is the top left corner of that image.
            To be able to map that Point on the image data, the input ConvertConfig must have the exact same geometry defined (including Crop and Scaling). You can reuse the same ConvertConfig used for the Image as it is not going to be modified.
            Average RGB gain is calculated from the area defined by sampleSize and used to calculate a white balance.
            </remarks>
            <param name="config">A ConvertConfig object containing the Geometry transformation the view was based upon.</param>
            <param name="point">The X,Y coordinates of the center of the sampled area based on the View Coordinate System</param>
            <param name="radius">A value between 1 and 10 that determines the size of the area to average. 1 is a single pixel area, 10 is 10x10 (100) pixels with x,y in the center</param>
            <returns>The white balance calculated based on the input. Note the alpha value of the Color is undefined</returns>
        </member>
        <member name="M:P1.ImageSdk.RawImage.WriteAsTiff(System.String,P1.ImageSdk.ITiffWritableImage,P1.ImageSdk.TiffConfig)">
            <summary>
            Writes the image as a tiff file
            </summary>
            <param name="filename">The full path of the file's location</param>
            <param name="bitmap">The rendered bitmap returned by Convert()</param>
            <param name="config">The tiff metadata related configuation</param>
            <see cref="T:P1.ImageSdk.TiffConfig"/>
            <returns>True if succeeds</returns>
        </member>
        <member name="T:P1.ImageSdk.Sdk">
            <summary>
            Static class for setting up Image SDK specific options
            </summary>
        </member>
        <member name="T:P1.ImageSdk.Sdk.LogMessageLevel">
            <summary>
            List of the different verbosity levels for logging
            </summary>
        </member>
        <member name="T:P1.ImageSdk.Sdk.LogHandlerFunction">
            <summary>
            The callback function used to printer logging messages
            </summary>
            <param name="level">The messages verbosity level. Used to include the level name in the output message</param>
            <param name="message">The log message coming from the SDK iternals</param>
        </member>
        <member name="M:P1.ImageSdk.Sdk.SetThreadPoolThreadCount(System.UInt32)">
            <summary>
            Use this to throttle the CPU resources consumed by image conversion and decoding,
            by setting a the number of thread the internal thread worker pool can utilize.
            </summary>
            <remarks>
            To have effect, this method must be called <em><b>before any</b></em> interaction with the SDK
            </remarks>
            <param name="noOfThreads"></param>
        </member>
        <member name="M:P1.ImageSdk.Sdk.SetSensorProfilesLocation(System.String)">
            <summary>
            Set the default location where the SDK looks for the SensorProfile files
            </summary>
            <remarks>
            The default search location is the <c>./SensorProfiles</c>, relative to the
            current working directory.
            To have effect, this method must be called <em><b>before any</b></em> interaction with
            the SDK.
            </remarks>
            <param name="pathToLocation">The path (absolute or relative) to the folder containing the profiles</param>
        </member>
        <member name="M:P1.ImageSdk.Sdk.Initalize">
            <summary>
            Force initialization and allocation of internal resources (memory &amp; threads)
            </summary>
            <remarks>
            This function is <em>optional</em>! You do not need to call this. It is called automatically
            when you process / decode the first image.
            Use this function to prepare the the SDK and avoid the costly initialization when you need to 
            process an image. You can also use this method to allocate the needed SDK resources (like memory)
            up front.
            </remarks>
        </member>
        <member name="M:P1.ImageSdk.Sdk.Dispose">
            <summary>
            Force disposal of the internal resources (memory)
            </summary>
            <remarks>
            The intention of this function is to let the application easy the memory pressure while ImageSDK is not in use.
            Once the ImageSDK is activated again, it will reallocate the internal resources.
            This function must not be called while the ImageSDK is active!
            </remarks>
        </member>
        <member name="M:P1.ImageSdk.Sdk.SetLoggingHandler(P1.ImageSdk.Sdk.LogHandlerFunction)">
            <summary>
            Provide a callback function to display all log messages coming from the SDK
            </summary>
            <remarks>
            You receive log messages for all levels, so you are responsible of filtering to ones
            you would like to appear in your logs.
            </remarks>
            <param name="printer">The callback function that receives the log messages</param>
            <seealso cref="M:P1.ImageSdk.Sdk.ClearLoggingHandler"/>
        </member>
        <member name="M:P1.ImageSdk.Sdk.ClearLoggingHandler">
            <summary>
            Remove a previously provided LogHandlerFunction callback
            </summary>
            <seealso cref="M:P1.ImageSdk.Sdk.SetLoggingHandler(P1.ImageSdk.Sdk.LogHandlerFunction)"/>
        </member>
        <member name="T:P1.ImageSdk.StackingOutput">
            <summary>
            Struct used for two purposes. the three boolean variables. hasRgbBitmap, hasIrgBitmap, hasNdviBitmap is used to order what type of output to be produced by the stacker.
            The produced bitmaps are returned in the correcponding: RgbiBitmap, IrgBitmap and NdviBitmap. 
            It is only possible to produce either an RgbiBitmap or an IrgBitmap (and not both in same run). The NdviBitmap can be selected if wanted.
            </summary>
        </member>
        <member name="F:P1.ImageSdk.StackingOutput.hasRgbiBitmap">
            <summary>
            If set to true. The stacker will produce an RGBI Bitmap (in member: RgbiBitmap)
            </summary>
        </member>
        <member name="F:P1.ImageSdk.StackingOutput.hasIrgBitmap">
            <summary>
            If set to true. The stacker will produce an IRG Bitmap (in member: IrgBitmap)
            </summary>
        </member>
        <member name="F:P1.ImageSdk.StackingOutput.hasNdviBitmap">
            <summary>
            If set to true. The stacker will produce an NDVI Bitmap (in member: NdviBitmap). 
            Ndvi is a single channel bitmap calculated based on the equation:  (R-I)/(R+I)
            </summary>
        </member>
        <member name="F:P1.ImageSdk.StackingOutput.RgbiBitmap">
            <summary>
            This will contain a 4 channel bitmap after stacking if hasRgbiBitmap was set to true
            </summary>
        </member>
        <member name="F:P1.ImageSdk.StackingOutput.IrgBitmap">
            <summary>
            This will contain a 3 channel bitmap after stacking if hasIrgBitmap was set to true
            </summary>
        </member>
        <member name="F:P1.ImageSdk.StackingOutput.NdviBitmap">
            <summary>
            This will contain a 1 channel bitmap after stacking if hasNdviBitmap was set to true
            </summary>
        </member>
        <member name="M:P1.ImageSdk.Stacking.DoStacking(P1.ImageSdk.BitmapImage,P1.ImageSdk.GeometricCorrection,P1.ImageSdk.BitmapImage,P1.ImageSdk.GeometricCorrection,P1.ImageSdk.StackingOutput)">
            <summary>
            A class to stack an rgb image and a nir images from PAS280i or the 4-band solution. The rgb image is regarded as the master image. The stacker will scale and merge the two images on to of each other
            into upto 2 of the 3 different formats that are supported by the stacker. What outputs to generated is setup in the StackingOutput struct.
            </summary>
            <param name="rgbBitmap"> is a reference to the rgb image (this image will normally for a PAS system be a stitched image). This bitmap is expected to be an undistorted image.</param>
            <param name="rgbCalibration"> is a reference to a struct containing a simplifed Geometric calibration (since image is undistored already - you only need to setup focallength and pixelsize).</param>
            <param name="nirBitmap"> is a reference to the nir image. This bitmap is expected to be still an distorted image. The stacker will undistort the image using the geometric calibration for the nir camera.</param>      
            <param name="nirCalibration"> is a reference to a struct containing a full Geometric calibration for the nir bitmap (the Stacker will undistort the nir image using this struct).</param>      
            <param name="stackingOutput"> is a struct that is used to setup the types of out puts the stacker should produce. It can produce either an Rgbi or a Irg bitmap. Aisde this it can in the same process alsoe produce an ndvi bitmap if it is selected. The selected bitmaps are returned in this stract after a successful stacking</param>              
            <returns></returns>
        </member>
        <member name="M:P1.ImageSdk.Stacking.SetFineCalibration(System.Byte[])">
            <summary>
            Setup a fine calibration. A finecalibration is a binary blob that is setup by the stacker itself and that can speed up the stacking process.
            </summary>
            <param name="byteArray"> An byte array containing a fine calibration to setup in stacker.</param>      
            <returns></returns>   
        </member>
        <member name="M:P1.ImageSdk.Stacking.GetFineCalibration">
            <summary>
            Get a fine calibration from the stacker. See also SetFineCalibration function
            </summary>        
            <returns>An byte array containing a fine calibration from the stacker</returns>    
        </member>
        <member name="M:P1.ImageSdk.Stacking.GetLastResult">
            <summary>
            Get the last result of the stacker. This can be used to get info about errors and warnings that had an impact on the stacking. 
            Errors will cause the stacker to throw an exception
            </summary>        
            <returns>The status from the last run of the stacker. Usefull if stacker fails or to see if there were warnings encountered during stacking</returns>  
        </member>
        <member name="M:P1.ImageSdk.Stitching.DoStitching(P1.ImageSdk.RawImage,P1.ImageSdk.BitmapImage,P1.ImageSdk.RawImage,P1.ImageSdk.BitmapImage)">
            <summary>
            A class to stitch L and R images from a PAS280 camera. The left image is regarded as the master image. The stitcher will seamlessly merge togther the two images into one large image.
            </summary>
            <param name="leftImage"> the left image (containing metadata etc.) </param>
            <param name="leftBitmap"> the left Rgb bitmap.</param>     
            <param name="rightImage"> the right image (containing metadata etc.) </param>
            <param name="rightBitmap"> the right Rgb bitmap.</param>     
            <returns> The resulting stitched bitmap. </returns>    
        </member>
        <member name="M:P1.ImageSdk.Stitching.SetFineCalibration(System.Byte[])">
            <summary>
            Setup a fine calibration. A finecalibration is a binary blob that is setup by the stitcher itself and that can speed up the stitching process.
            </summary>
            <param name="byteArray"> An byte array containing a fine calibration to setup in stitcher.</param>      
            <returns></returns>           
        </member>
        <member name="M:P1.ImageSdk.Stitching.GetFineCalibration">
            <summary>
            Get a fine calibration from the stitcher. See also SetFineCalibration function
            </summary>        
            <returns>An byte array containing a fine calibration from the stitching</returns>    
        </member>
        <member name="M:P1.ImageSdk.Stitching.GetLastResult">
            <summary>
            Get the last result of the stitcher. This can be used to get info about errors and warnings that had an impact on the stitching. 
            Errors will cause the stitcher to throw an exception
            </summary>        
            <returns>The status from the last run of the stitcher. Usefull if stitcher fails or to see if there were warnings encountered during stitching</returns>         
        </member>
        <member name="T:P1.ImageSdk.TagId">
            <summary>
            A reference to a meta data tag id in IIQ raw files
            </summary>
            <remarks>
            <para>This struct defines 3 tag properties: Type, Id and Category:</para>
            <para><em><see cref="T:P1.ImageSdk.ImageTagType"/></em> specifies what kind of data standard the tag is taken from: Tiff, Exif or Phase One
            proprietary.</para>
            <para><em>Id</em> defines the tag number, as defined in either Tiff or Exif standards.
            (Or a Phase One proprietary id.)</para>
            <para><em><see cref="T:P1.ImageSdk.ImageTagCategory"/></em> specifies in what part of the image container to look for themeta data tag.
            The image container file, might contain thumbnail, previews or even multiple full images. The <em>category</em> defines
            that we want a tag related to, say the preview, and not the full image.</para>
            </remarks>
        </member>
        <member name="F:P1.ImageSdk.TagId.PreviewWidth">
            <summary>The preview (thumbnail) image width in pixels, taken from TIFF meta data</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.PreviewHeight">
            <summary>The preview (thumbnail) image height in pixels, taken from TIFF meta data</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.PreviewBitsPerSample">
            <summary>A vector with the size of each component (color)</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.Make">
            <summary>The scanner / camera manufacturer</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.Model">
            <summary>The scanner / camera model name or number</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.XResolution">
            <summary>The number of pixels per ResolutionUnit in the ImageWidth direction</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.YResolution">
            <summary>The number of pixels per ResolutionUnit in the ImageLength direction</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ResolutionUnit">
            <summary>The unit of measurement for XResolution and YResolution</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.XmpPacket">
            <summary>XML packet (text blob) containing XMP metadata</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ExposureTime">
            <summary>Exposure time, given in seconds</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.FNumber">
            <summary>The F number</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ExposureProgram">
            <summary>The class of the program used by the camera to set exposure when the picture is taken</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.IsoSpeedRatings">
            <summary>Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ShutterSpeedValue">
            <summary>Shutter speed (In APEX)</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ApertureValue">
            <summary>Shutter speed (In APEX)</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.DateTime">
            <summary>Date and time of image creation</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ExposureBias">
            <summary>The exposure bias (In APEX)</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.LightSource">
            <summary>The kind of light source (Exif defined enum)</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.FocalLength">
            <summary>The actual focal length of the lens, in mm</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.WhiteBalance">
            <summary>Indicates the white balance mode set when the image was shot (0 = Auto, 1 = Manual)</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.ImageUniqueId">
            <summary>Indicates an identifier assigned uniquely to each image</summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.SerialNumber">
            <summary></summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.LensName">
            <summary></summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.Orientation">
            <summary></summary>
        </member>
        <member name="F:P1.ImageSdk.TagId.OrientationMode">
            <summary></summary>
        </member>
    </members>
</doc>
